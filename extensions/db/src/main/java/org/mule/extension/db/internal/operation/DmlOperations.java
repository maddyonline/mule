/*
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package org.mule.extension.db.internal.operation;

import static org.mule.runtime.extension.api.introspection.parameter.ExpressionSupport.NOT_SUPPORTED;
import org.mule.extension.db.api.StatementStreamingResultSetCloser;
import org.mule.extension.db.api.param.QueryDefinition;
import org.mule.extension.db.internal.DbConnector;
import org.mule.extension.db.internal.domain.connection.DbConnection;
import org.mule.extension.db.internal.domain.executor.SelectExecutor;
import org.mule.extension.db.internal.domain.metadata.SelectOutputResolver;
import org.mule.extension.db.internal.domain.statement.QueryStatementFactory;
import org.mule.extension.db.internal.resolver.query.DefaultQueryResolver;
import org.mule.extension.db.internal.resolver.query.QueryResolver;
import org.mule.extension.db.internal.result.resultset.IteratorResultSetHandler;
import org.mule.extension.db.internal.result.resultset.ListResultSetHandler;
import org.mule.extension.db.internal.result.resultset.ResultSetHandler;
import org.mule.extension.db.internal.result.row.InsensitiveMapRowHandler;
import org.mule.runtime.extension.api.annotation.Expression;
import org.mule.runtime.extension.api.annotation.ParameterGroup;
import org.mule.runtime.extension.api.annotation.metadata.MetadataScope;
import org.mule.runtime.extension.api.annotation.param.Connection;
import org.mule.runtime.extension.api.annotation.param.Optional;
import org.mule.runtime.extension.api.annotation.param.UseConfig;
import org.mule.runtime.extension.api.annotation.param.display.Text;
import org.mule.runtime.extension.api.runtime.operation.InterceptingCallback;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DmlOperations {

  private static final Logger LOGGER = LoggerFactory.getLogger(DmlOperations.class);
  private static final int DEFAULT_FETCH_SIZE = 10;

  @Inject
  private StatementStreamingResultSetCloser resultSetCloser;

  private final QueryResolver queryResolver = new DefaultQueryResolver();

  /**
   * Selects data from a database
   */
  @MetadataScope(outputResolver = SelectOutputResolver.class)
  public InterceptingCallback<Object> select(QueryDefinition query,
                                             @Optional(defaultValue = "false") @Expression(NOT_SUPPORTED) boolean streaming,
                                             @Optional Integer fetchSize,
                                             @Optional Integer maxRows,
                                             @UseConfig DbConnector connector,
                                             @Connection DbConnection connection)
      throws SQLException {

    QueryStatementFactory statementFactory = getStatementFactory(fetchSize, maxRows, streaming, query.getSettings());

    InsensitiveMapRowHandler recordHandler = new InsensitiveMapRowHandler();
    ResultSetHandler resultSetHandler =
        streaming ? new IteratorResultSetHandler(recordHandler, resultSetCloser) : new ListResultSetHandler(recordHandler);

    Object result = new SelectExecutor(statementFactory, resultSetHandler)
        .execute(connection, queryResolver.resolve(query, connector, connection));

    return new InterceptingCallback<Object>() {

      @Override
      public Object getResult() throws Exception {
        return result;
      }

      @Override
      public void onException(Exception exception) {
        resultSetCloser.closeResultSets(connection);
      }
    };
  }

  /**
   * Inserts data into a database.
   *
   * @param queryDefinition
   * @param autoGeneratedKeyAttributes
   * @param bulkMode                   Indicates whether or not a bulk update is requested. When true, payload is required to be a
   *                                   collection and a bulk update executes for each item in the collection.
   */
  public int insert(QueryDefinition queryDefinition,
                    @ParameterGroup AutoGeneratedKeyAttributes autoGeneratedKeyAttributes,
                    @Optional(defaultValue = "false") boolean bulkMode) {
    return 0;
  }

  /**
   * Updates data in a database.
   *
   * @param queryDefinition
   * @param bulkMode        Indicates whether or not a bulk update is requested. When true, payload is required to be a
   *                        collection and a bulk update executes for each item in the collection.
   */
  public int update(QueryDefinition queryDefinition, @Optional(defaultValue = "false") boolean bulkMode) {
    return 0;
  }

  /**
   * Deletes data in a database.
   *
   * @param queryDefinition
   * @param bulkMode        Indicates whether or not a bulk update is requested. When true, payload is required to be a
   *                        collection and a bulk update executes for each item in the collection.
   */
  public int delete(QueryDefinition queryDefinition, @Optional(defaultValue = "false") boolean bulkMode) {
    return 0;
  }

  /**
   * @param queryDefinition
   * @param streaming                  Indicates if result sets must be returned as an iterator or as list of maps.
   * @param fetchSize                  Indicates how many rows to fetch from the database when rows are read from a resultSet.
   *                                   This property is required when streaming is {@code true}; in that case a default value (10) is used.
   * @param maxRows                    Sets the limit for the maximum number of rows that any ResultSet object generated by this
   *                                   message processor can contain for the given number. If the limit is exceeded, the excess rows
   *                                   are silently dropped.
   * @param autoGeneratedKeyAttributes
   * @return
   */
  @MetadataScope(outputResolver = SelectOutputResolver.class)
  public Map<String, Object> storedProcedure(QueryDefinition queryDefinition,
                                             @Optional(defaultValue = "false") boolean streaming,
                                             @Optional(defaultValue = "10") int fetchSize,
                                             @Optional Integer maxRows,
                                             @ParameterGroup AutoGeneratedKeyAttributes autoGeneratedKeyAttributes) {
    return new HashMap<>();
  }

  /**
   * Updates data in a database.
   *
   * @param sql
   * @param file         The location of a file to load. The file can point to a resource on the classpath or on a disk.
   *                     This parameter is mutually exclusive with {@code sql}
   * @param settings
   * @return
   */
  public int[] bulkUpdate(@Optional @Text String sql, @Optional String file, @ParameterGroup QuerySettings settings) {
    return new int[] {0};
  }

  private QueryStatementFactory getStatementFactory(Integer fetchSize, Integer maxRows, boolean streaming,
                                                    QuerySettings settings) {
    QueryStatementFactory statementFactory = new QueryStatementFactory();

    if (maxRows != null) {
      statementFactory.setMaxRows(maxRows);
    }

    if (fetchSize != null) {
      statementFactory.setFetchSize(fetchSize);
    } else if (streaming) {
      LOGGER.warn("Streaming mode needs to configure fetchSize property. Using default value: " + DEFAULT_FETCH_SIZE);
      statementFactory.setFetchSize(DEFAULT_FETCH_SIZE);
    }

    statementFactory.setQueryTimeout(new Long(settings.getQueryTimeoutUnit().toSeconds(settings.getQueryTimeout())).intValue());

    return statementFactory;
  }
}
